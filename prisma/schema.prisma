// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    MITRA
    MERCHANT
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    firstName     String?
    lastName      String?
    isVerified    Boolean   @default(false)
    emailVerified DateTime?
    password      String?
    image         String?
    telepon       String?
    task          Task[]
    saldo         Int       @default(0)
    roles         Role[]    @default([USER])
    accounts      Account[]
    sessions      Session[]
    Cart          Cart[]
    Order         Order[]
    Mitra         Mitra?
    Alamat        Alamat[]
    Merchant      Merchant?
}

model Task {
    id        String   @id @default(cuid())
    title     Role
    completed Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
}

model Merchant {
    id        String   @id @default(cuid())
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    saldo     Int      @default(0)
    nama      String
    alamat    String
    jamBuka   String
    jamTutup  String
    deskripsi String?
    labels    String[]
    rating    Int?
    dokumen   String[]
    Menu      Menu[]
    Order     Order[]
    Cart      Cart[]
}

model Alamat {
    id           String  @id @default(cuid())
    userId       String
    user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    alamat       String
    detailLokasi String?
    patokan      Int?
}

model Mitra {
    id             String @id @default(cuid())
    saldo          Int    @default(0)
    rating         Int?
    profilePicture String
    sim            String
    stnk           String
    platNomor      String
    tipeKendaraan  String
    userId         String @unique
    user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MetodePembayaran {
    CASH
    WALLET
}

model Order {
    id               String            @id @default(cuid())
    userId           String            @unique
    total            Int
    status           String
    User             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    Menu             Menu?             @relation(fields: [menuId], references: [id], onDelete: Cascade)
    menuId           String?           @unique
    Merchant         Merchant?         @relation(fields: [merchantId], references: [id])
    merchantId       String?
    DetailPembayaran DetailPembayaran?
    MetodePembayaran MetodePembayaran
    Cart             Cart?
}

model DetailPembayaran {
    id        String   @id @default(cuid())
    harga     Int
    ongkir    Int
    fee       Int
    Voucher   Voucher? @relation(fields: [voucherId], references: [id])
    Order     Order    @relation(fields: [orderId], references: [id])
    orderId   String   @unique
    voucherId String?
}

model Cart {
    id         String   @id @default(cuid())
    userId     String
    menuId     String
    qty        Int
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    menu       Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
    Order      Order    @relation(fields: [orderId], references: [id])
    orderId    String   @unique
    merchantId String
    merchant   Merchant @relation(fields: [merchantId], references: [id])
}

model Voucher {
    id               String             @id @default(cuid())
    kode             String             @unique
    diskon           Int
    DetailPembayaran DetailPembayaran[]
}

model Menu {
    id         String    @id @default(cuid())
    nama       String
    harga      Int
    deskripsi  String
    gambar     String
    kategori   String
    Cart       Cart[]
    Order      Order[]
    Merchant   Merchant? @relation(fields: [merchantId], references: [id])
    merchantId String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
